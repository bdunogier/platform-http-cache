parameters:
    ezplatform.http_cache.controller.invalidatetoken.class: EzSystems\PlatformHttpCacheBundle\Controller\InvalidateTokenController
    ezplatform.http_cache.listener.vary_header.class: EzSystems\PlatformHttpCacheBundle\EventListener\ConditionallyRemoveVaryHeaderListener
    ezplatform.http_cache.proxy_client.http_dispatcher.class: FOS\HttpCache\ProxyClient\HttpDispatcher

services:
    EzSystems\PlatformHttpCacheBundle\ProxyClient\HttpDispatcherFactory:
        arguments:
            - '@ezpublish.config.resolver'
            - '@ezpublish.config.dynamic_setting.parser'
            - '%ezplatform.http_cache.proxy_client.http_dispatcher.class%'

    FOS\HttpCache\ProxyClient\HttpDispatcher:
        factory: 'EzSystems\PlatformHttpCacheBundle\ProxyClient\HttpDispatcherFactory:buildHttpDispatcher'
        lazy: true
        arguments:
            - '%ezplatform.http_cache.varnish.http.servers%'
            - '%ezplatform.http_cache.varnish.http.base_url%'

    fos_http_cache.proxy_client.varnish:
        class: EzSystems\PlatformHttpCacheBundle\ProxyClient\Varnish
        arguments:
            - '@FOS\HttpCache\ProxyClient\HttpDispatcher'
            - '%fos_http_cache.proxy_client.varnish.options%'

    ezplatform.http_cache.purge_client:
        alias: ezplatform.http_cache.purge_client_decorator

    ezplatform.http_cache.purge_client_decorator:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\RepositoryPrefixDecorator
        arguments: ['@ezplatform.http_cache.purge_client_internal', '@ezplatform.http_cache.repository_tag_prefix']

    ezplatform.http_cache.purge_client_internal:
        alias: ezplatform.http_cache.purge_client.local

    ezplatform.http_cache.purge_client.varnish:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\VarnishPurgeClient
        arguments:
            - '@fos_http_cache.cache_manager'
        tags:
            - {name: ezplatform.http_cache.purge_client, purge_type: http}
            - {name: ezplatform.http_cache.purge_client, purge_type: varnish}

    ezplatform.http_cache.purge_client.local:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\LocalPurgeClient
        arguments: ['@ezplatform.http_cache.tag_aware_store']
        tags:
            - {name: ezplatform.http_cache.purge_client, purge_type: local}

    ezplatform.http_cache.tag_aware_store:
        class: Toflar\Psr6HttpCacheStore\Psr6Store
        arguments:
            - cache_directory: '%ezplatform.http_cache.store.root%'

    ezplatform.http_cache.fos_tag_handler.xkey:
        class: EzSystems\PlatformHttpCacheBundle\Handler\TagHandler
        arguments:
         - '%ezplatform.http_cache.tags.header%'
         - '@ezplatform.http_cache.repository_tag_prefix'
         - header_formatter: '@fos_http_cache.tag_handler.header_formatter'
           strict: '%fos_http_cache.tag_handler.strict%'

    ezplatform.http_cache.user_context_provider.role_identify:
        class: EzSystems\PlatformHttpCacheBundle\ContextProvider\RoleIdentify
        arguments: ["@ezpublish.api.repository"]
        tags:
            - { name: fos_http_cache.user_context_provider }

    ezplatform.http_cache.controller.invalidatetoken:
        class: "%ezplatform.http_cache.controller.invalidatetoken.class%"
        arguments:
         - '@ezpublish.config.resolver'
         - "%ezplatform.http_cache.invalidate_token.ttl%"
         - "@fos_http_cache.http.symfony_response_tagger"

    ezplatform.http_cache.listener.vary_header:
        class: "%ezplatform.http_cache.listener.vary_header.class%"
        arguments:
         - "%ezplatform.http_cache.no_vary.routes%"
        tags:
            - { name: kernel.event_subscriber, priority: -100 }

    ezplatform.http_cache.repository_tag_prefix:
        class: EzSystems\PlatformHttpCacheBundle\RepositoryTagPrefix
        # Use config resolver to be able to lazy load reading SA setting "repository" to avoid scope change issues
        arguments: ["@ezpublish.config.resolver", '%ezpublish.repositories%']
